package processing.test.mobileapp;

/* autogenerated by Processing revision 1292 on 2024-01-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class MobileApp extends PApplet {

 

//import androidx.activity.result.contract.ActivityResultContracts.RequestPermission;
//import javax.swing.JFileChooser;
//import javax.swing.filechooser.FileNameExtensionFilter;
//import android.view.Window;

//import select.files.*;
//SelectLibrary files;

//JFileChooser fileChooser = new JFileChooser();

SoundFile soundfile;
String fileTitle = "Niewybrano utworu";

PFont font;

PShape pause;
PShape play;
PShape rateRect;
PShape rateRectR;

MButton playButton;
MButton rateX05Button;
MButton rateX1Button;
MButton rateX2Button;
MButton openButton;

ProgressBar progressBar;

int duration = 0;
String durationText = "**:**:**";
int timeElapsed = 0;
String elapsedText = "**:**:**";
int lastTime = 0;

float rate = 1; 
int loadingNo = 0;
String[] dots = {"", ".", "..", "..."};

boolean isLoading = false;

FFT fft;
AudioIn audioIn;
int bands = 16;
float[] spectrum = new float[bands];
int[] colors = {color(0, 255, 0), color(43, 212, 0), color(86, 169, 0), color(129, 129, 0), color(169, 86, 0), color(212, 43, 0), color(255, 0, 0)};
int[] treshholds = {0, 10, 30, 50, 100, 200, 400};


public void setup() {
    /* size commented out by preprocessor */;
    requestPermission("android.permission.READ_EXTERNAL_STORAGE", "checkPermissionGranted");
    requestPermission("android.permission.RECORD_AUDIO", "checkPermissionGranted2");
    
    //files = new SelectLibrary(this);
    //FileNameExtensionFilter filter = new FileNameExtensionFilter("mp3", "wav");
    //fileChooser.setFileFilter(filter);
    
    fft = new FFT(this, bands);
    audioIn = new AudioIn(this, 0);
    audioIn.play();
    fft.input(audioIn);
    
    font = createFont("Calibri", 25);
    textFont(font);
    
    pause = loadShape("pause.svg");
    play = loadShape("play.svg");
    
    playButton = new CircleButton(play, width / 2, 0.85f * height, 0.1f * height);
    
    rateRect  = loadShape("rect.svg");
    rateRectR  = loadShape("rectR.svg");
    rateX05Button = new RectButton(rateRect, 0.1f * width, 0.9f * height, 0.1f * width, 0.05f * height, "0.5");
    rateX1Button = new RectButton(rateRectR, 0.2f * width + 10, 0.9f * height, 0.1f * width, 0.05f * height, "1");
    rateX2Button = new RectButton(rateRect, 0.3f * width + 20, 0.9f * height, 0.1f * width, 0.05f * height, "2");
    openButton = new RectButton(rateRect, 0.825f * width, 0.9f * height, 0.25f * width, 0.05f * height, "otwórz mp3");

    progressBar = new ProgressBar((int)(0.05f * width), (int)(0.7f * height), (int)(0.95f * width), (int)(0.7f * height), 10);
}

public void checkPermissionGranted(boolean granted) {
  if (granted) {   
    println("ES available");
    // ...
  } else {
    println("ES is not available");
    // ...
  }
}

public void checkPermissionGranted2(boolean granted) {
  if (granted) {   
    println("RA available");
    // ...
  } else {
    println("RA is not available");
    // ...
  }
}

public void draw() {
    background(255);
    
    if (soundfile != null && soundfile.isPlaying()) {
        int nowTime = millis();
        timeElapsed += (int)((nowTime - lastTime) * rate);
        lastTime = nowTime;
        
        if (timeElapsed > duration) {
            pause();
        }
        else {
            progressBar.setValue(timeElapsed);
            
            int el = timeElapsed / 1000;
            elapsedText = "" + el / 3600 + ":" + (el / 60) % 60 + ":" + el % 60;
        }
    }
    
    fill(0);
    textAlign(LEFT, TOP);
    text(fileTitle, 0.05f * width, 0.05f * height);
    
    text(elapsedText, 0.05f * width, 0.8f * height);
    textAlign(RIGHT, TOP);
    text(durationText, 0.95f * width, 0.8f * height);
    
    
    if (isLoading) {
        textAlign(LEFT, BOTTOM);
        text("Ładowaie utworu muzycznego" + dots[loadingNo], width / 4, (int)(0.68f * height));
        loadingNo = (loadingNo + 1) % 4;
        delay(100);
    }
    
    playButton.draw();
    rateX05Button.draw();
    rateX1Button.draw();
    rateX2Button.draw();
    openButton.draw();
    
    progressBar.draw();
    
    if (soundfile != null) {
        if (soundfile.isPlaying()) {
            fft.analyze(spectrum);
        }
        
        drawSpectrum();
    }
    
    delay(100);
}

public void drawSpectrum() {
    int xOffset = width / 2 / bands;
    int x = width / 4 + (int)(0.05f * xOffset);
    
    int yOffset = (int)(0.6f * height / colors.length);
    int y = (int)(0.68f * height) - yOffset;
    
    for (int i = 0; i < bands; i++) {
        //System.out.println(i + ".  " + (int)(spectrum[i] * 1_000_000));
        int v = (int)(spectrum[i] * 1_000_000);
        
        //treshholds
        for(int j = 0; j < treshholds.length; j++) {
            if (v > treshholds[j]) {
                fill(colors[j]);
                rect(x, y - j * yOffset, (int)(0.9f * xOffset), (int)(0.9f * yOffset));
            }
            else {
                break;
            }
        }
        x += xOffset; 
    }
}


public void mousePressed() {
    if (playButton.contains(mouseX, mouseY)) {
        if (soundfile != null) {
            if (soundfile.isPlaying()) {
                pause();
            }
            else {
                play();
            }
        }
    }
    else if (rateX05Button.contains(mouseX, mouseY)) {
        if (soundfile != null) {
            rateX05Button.setShape(rateRectR);
            rateX1Button.setShape(rateRect);
            rateX2Button.setShape(rateRect);
            soundfile.rate(0.5f);
            rate = 0.5f;
        }
    }
    else if (rateX1Button.contains(mouseX, mouseY)) {
        if (soundfile != null) {
            rateX05Button.setShape(rateRect);
            rateX1Button.setShape(rateRectR);
            rateX2Button.setShape(rateRect);
            soundfile.rate(1);
            rate = 1.0f;
        }
    }
    else if (rateX2Button.contains(mouseX, mouseY)) {
        if (soundfile != null) {
            rateX05Button.setShape(rateRect);
            rateX1Button.setShape(rateRect);
            rateX2Button.setShape(rateRectR);
            soundfile.rate(2);
            rate = 2.0f;
        }
    }
    else if (openButton.contains(mouseX, mouseY)) {
        /*int returnVal = fileChooser.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            musicFileSelected(file);
        } */
    }
}

public void mouseDragged() {
    if (progressBar.contains(mouseX, mouseY)) {
        if (soundfile != null) {
            boolean playing = soundfile.isPlaying();
            timeElapsed = progressBar.drag(mouseX, mouseY);
            soundfile.jump((float)(timeElapsed) / 1000.0f);
            
            if (!playing) {
               soundfile.pause(); 
            }
            
            int el = timeElapsed / 1000;
            elapsedText = "" + el / 3600 + ":" + (el / 60) % 60 + ":" + el % 60;
        }
    }
}


public void pause() {
    if (soundfile != null) {
        playButton.setShape(play);
        soundfile.pause();
    }
}

public void play() {
    if (soundfile != null) {
        playButton.setShape(pause);
        soundfile.play();
        
        lastTime = millis();
    }
}


public void musicFileSelected(File selection) {
    String file = selection.getAbsolutePath();
    fileTitle = file.substring(file.lastIndexOf("/") + 1, file.lastIndexOf("."));
    
    if (soundfile == null) {
        //soundfile = new SoundFile(this, file);
        openFile(file);
        return;
    }
    else if (soundfile.isPlaying()) {
        pause();
    }
    soundfile.removeFromCache();
    openFile(file);
}

public void openFile(String filePath) {
    isLoading = true;
    soundfile = new SoundFile(this, filePath, false);
    isLoading = false;
    //System.out.println("Załądowano nowy plik");
    duration = (int)(soundfile.duration() * 1000);
    int dur = duration / 1000;
    durationText = "" + dur / 3600 + ":" + (dur / 60) % 60 + ":" + dur % 60;
    elapsedText = "0:0:0";
    
    progressBar.setValue(0);
    progressBar.setTotalValue(duration);
}

class MButton {
  private PShape bShape;
  protected float cx, cy;
  
  public MButton(PShape BShape, float CX, float CY) {
      bShape = BShape;
      cx = CX;
      cy = CY;
  }
    
  public void setText(String v) {
  }
  
  public void setShape(PShape BShape) {
      bShape = BShape;
  }
  
  public PShape getShape() {
      return bShape;
  }
  
  public void draw() {
    translate(cx, cy);
  }
  
  public boolean contains(float x, float y) {
      return false;
  }
}

class RectButton extends MButton {
    float w, h;
    String t = "";
  
    public RectButton(PShape BShape, float CX, float CY, float W, float H, String text) {
        super(BShape, CX, CY);
        w = W;
        h = H;
        t = text;
    }
  
    public void draw() {
        pushMatrix();
        
        super.draw();
        shape(getShape(), - w / 2, - h / 2, w, h);
        
        textAlign(CENTER, CENTER);
        text(t, 0, 0);
        
        popMatrix();
    }
    
    public void setText(String v) {
        t = v;
    }
  
    public boolean contains(float x, float y) {
        return (x >= cx - w / 2) && (x <= cx + w / 2) && (y >= cy - h / 2) && (y <= cy + h / 2);
    }
}

class CircleButton extends MButton {
    float r;
  
    public CircleButton(PShape BShape, float CX, float CY, float R) {
        super(BShape, CX, CY);
        r = R;
    }
  
    public void draw() {
        pushMatrix();
        
        super.draw();
        shape(getShape(), - r, - r, 2 * r, 2 * r);
        
        popMatrix();
    }
  
    public boolean contains(float x, float y) {
        return sqrt((cx - x) * (cx - x) + (cy - y) * (cy - y)) <= r;
    }
}

class ProgressBar {
  int bx, by, ex, ey;
  int value = 0;
  int totalValue = 100;
  int r;
  
  int preColor = color(50);
  int postColor = color(200);
  
  public ProgressBar(int BX, int BY, int EX, int EY, int R) {
      bx = BX;
      by = BY;
      ex = EX;
      ey = EY;
      r = R;
  }
  
  public void setPreColor(int c) {
      preColor = c;
  }
  
  public void setPostColor(int c) {
      postColor = c;
  }
  
  public void setValue(int v) {
      value = v;
  }
  
  public void setTotalValue(int v) {
      totalValue = v;
  }
  
  public void draw() {
      int px = bx + (ex - bx) * value / totalValue;
      int py = by + (ey - by) * value / totalValue;
      
      strokeWeight(5);
      stroke(postColor);
      line(px, py, ex, ey);
      stroke(preColor);
      line(bx, by, px, py);
      
      strokeWeight(0);
      circle(px, py, 2 * r);
  }
  
  public boolean contains(int x, int y) {
      return (x >= bx) && (x <= ex) && (y >= (by - r)) && (y <= (by + r)); 
  }
  
  public int drag(int x, int y) {
      value = totalValue * (x - bx) / (ex - bx);
      
      if (value > totalValue) {
          value = totalValue;
      }
      else if (value < 0) {
          value = 0;
      }
      
      return value;
  }
}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "MobileApp" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
